-# Welcome

# Introduction

Welcome to my readers. I appreciate your purchase. This will help me continue
improving the book content.

Before we go into the technical details, I have something to say.

Firsly, I'm not a RethinkDB expert at all. I'm just the average guy who loves
programming and new technologies. To me, RethinkDB is very joyful to use.
However, due to its age, there are not many books and documents about it comparing to other
database systems. RethinkDB Doc/API document is very good. However, at the entry
level, it can be hard to understand how to use an API or where to start, it's hard for people to
jump direcly into API document and use it.

The purpose of this book is to organize the concepts of RethinkDB in order to help you to
read and understand RethinkDB API directly. Upon finishing the book, hopefully you will be able to 
easily extend your knowledge with many other RethinkDB documents that are out there.

If I do my job well, this book is what I wished I had on hands when I started with 
RethinkDB, instead of spending hours on API docs and then trying and fail in console.

Secondly, I'm a fan of Mixu's[^mixu] writing style[^mixu_write]. I won't cover
deeply stuff like installing RethinkDB, and so on. Those topics are covered 
very well on RethinkDB document itself. I also won't cover extensively
parameter, option of command either, since you can easily look up for a particular 
API and find all its argument, option. I will just make sure you understand what
is the command, what does it do, and how to apply it in a real scenario.

[^mixu]:http://blog.mixu.net/
[^mixu_write]:http://blog.mixu.net/2012/07/26/writing-about-technical-topics-like-its-2012/

Thirdly, I'm not fluent in English. If you found any mistake, you can report the
issue on [repository](https://github.com/kureikain/simplyrethink) or email me.

Fourthly, RethinkDB is changing so fast that something in this book may not reflect
it's current state. Bear with it and let me know, via my email or Github. Since this is a LeanPub
book, once I updated you can download it again free of charge.

And finally, due to my limited knowledge with RethinkDB (again, I'm nowhere a
RethinkDB expert), I want to keep this book short and straight sto the points. Expect a book of around 200
pages. A book that you can pick up, read on the train while riding to work; and after
a week you can sitdown and actually start the first RethinkDB power project.

# Why learning RethinkDB

RethinkDB is a mind-blowing to me. I like the beauty, nature of ReQL which is
built into the language. It's also very developer friendly with its own
administrator UI. RethinkDB is very easy to learn, because its query language is
nature to what we think. We can easily tell what a ReQL do, what is the
execution order.

Take this SQL query:

    SELECT * FROM users WHERE name="Vinh" ORDER BY id DESC LIMIT 10,100

It's a string and you may sometime forgot the order of them. Will we put
**ORDER** before or after **LIMIT**? Where the `WHERE` clause should appear?
We don't even know if an index will be used. Because SQL is a string, the order
of execution is defined by the syntax. You have to remember that syntax.

Compare with ReQL(RethinkDB Query Language):

    r.table('users').getAll('vinh', {index: 'name'}).order_by(r.desc(id)).limit(10)

We can guess what it does from query, and the order of execution is clear too
us. Because it looks like function call and chaning, from left too right; therefore
learning ReQL is like lean the API of an ORM.

We can also guess it will use an index call **name** when finding data. The way
query is constructed, somehow feel like `jQuery` if you are a front-end
dev who never works with database. Or if you are a functional programming guy,
you probably see the pattern.

If above example didn't convince you, then take this:

    SELECT *
    FROM foods as f
    INNER JOIN compounds_foods as c ON c.food_id=f.id
    WHERE f.id IN (10, 20)
    ORDER By f.id DESC, c.id ASC

It will take you sometime to learn that in ReQL, it's:


    r.db("foodb")
      .table("foods")
      .filter(function (food) {
        return r.expr([10, 20]).contains(food("id"))
      })
      .eqJoin("id", r.db("foodb").table("compounds_foods"), {index: "food_id"})

Even if you are not familar with syntax, you can tell what is going to happen. The
query looks like a chain of API call. The order of execution is clear to me.

RethinkDB really makes me rethinking about how we work with database. I don't
have to write query in a language that I don't like. I'm no longer forced
to use a syntax that I don't like because I have no choice.

RethinkDB is explicit. Later on, you will also learn that in RethinkDB, you
have to explicitly tell it to do some *not-very-safely* operation. Such as when a
non-atomic update is require, you clearly set a flag to do it.

To me, RethinkDB forces us to understand what we are doing. Everything is
exposed on the query. No magic, no why this query fail on production but
work on my local.

In Vietnam culture, we usually do something 3 times before we end it. Being a
Vietnamese, let's me end this show with the third example.

Do you understand below query:

    r
      .db('foodb')
      .table('foods')
      .filter(r.row('created_at').year().eq(2011))

This query is used to find all foods which were inserted in year **2011**. I
don't even give equivalent SQL example, because it just cannot be as beautiful
and verbose as above query.

# Feedback

I appreciate all of your feedbacks to improve this book. Below is my handle on internet:

* twitter: [http://twitter.com/kureikain](http://twitter.com/kureikain)
* email: [kurei@axcoto.com](kurei@axcoto.com)
* twitter book hashtag: #simplyrethinkdb

